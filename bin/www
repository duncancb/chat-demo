#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { Server } = require("socket.io");
// var debug = require('debug')('chat-room:server');
var http = require('http');
var app = require('../src/app');
var { get_user, insert_message, rows_query } = require('../src/db.js');
var { Channel } = require('../src/channel.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Configure socket.io for chat room
 */
 
var socketIO = new Server(server);
var channel = new Channel('TheOnlyRoom');

socketIO.on("connection", async (socket) => {
  const userId = parseInt(socket.handshake.query['userId']);
  // Check whether the user has already joined the channel
  var { user, socket_id } = channel.getUser(userId)
  var registered_socket = socketIO.sockets.sockets.get(socket_id);
  if( !user ) {
    // The user has not yet joined the channel
    const { error, user } = await get_user(userId);
    if( error ) {
      // Could not find the user
      socket.emit("connection-refused", error);
      socket.disconnect();
      return;
    }
    channel.setUser(user, socket);
  } else if( !registered_socket ) {
    // The user's connection has failed/closed so use the new socket
    channel.setUser(user, socket);
  } else if(socket.id != socket_id) {
    // The user has an active socket
    socket.emit("connection-refused", "User is already connected");
    socket.disconnect();
    return;
  }
  
  // Load all saved messages so that they can be redisplayed
  const oldMessages = await rows_query(
    'SELECT content, from_user_id, user_name ' +
    'FROM messages JOIN users ON users.id = from_user_id ' +
    'ORDER BY messages.id');
  // Send the saved messages to the client
  socket.emit("old-messages-ready", oldMessages);
  // join room
  socket.join(channel.id);
  
  socket.on("send-message", async (message, userId, callback) => {
    var ok=false, error=null;
    const user = channel.getUser(userId);
    if( user ) {
      ok = await insert_message(message, user.user.id);
      if( ok ) {
        socket.to(channel.id).emit("receive-message", message, user.user);
      } else {
        error = "Failed to save and send message";
      }
    } else {
      error = "Failed to send message; please try reconnecting";
    }
    callback({ok: ok, error: error});
  });

  socket.on("disconnect", () => {
    const user = channel.getSocketUser(socket.id);
    if( user ) {
      channel.removeUser(user.id);
    }
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server working on port ${port}`);
});
server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

/*function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}*/
